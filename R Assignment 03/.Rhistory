geom_line(color="royalblue") +
labs(title="Bike Rentals vs. Temperature",
x="Temperature",
y="Bike Rentals") +
theme_minimal()+
theme(    axis.title = element_text(size = 7),
axis.text = element_text(size = 7),
title = element_text(size = 6))
# Boxplot of Bike Rentals by Humidity Level
plot3 <- ggplot(df, aes(x=hum_new, y=cnt, fill=hum_new)) +
geom_boxplot() +
labs(title="Bike Rentals by Humidity Level",
x="Humidity Level",
y="Bike Rentals") +
scale_fill_manual(values=c("lightblue", "lightgreen", "salmon")) +
theme_minimal()+
theme(    axis.title = element_text(size = 7),
axis.text = element_text(size = 7),
title = element_text(size = 6))
# Text
text_box <- ggplot()+
annotate("text",
x= 0,
y=0,
label="desc",
col='red',
size=4)
#Infographic
infographic <- plot1 /
plot_spacer() /
(plot2| plot3) /
text_box
+
plot_layout(heights = c(1000, 0.1, 900,200) , widths = c(20,15,300)) +
plot_annotation(
title = "Effect of Tempetature and Humidity on Bike Rentals"
)
# Scatter plot of Temperature vs Rental Count with Humidity
plot1 <- ggplot(df, aes(x = temp*100, y = cnt, color = hum*100)) +
geom_point(size = 1, alpha = 0.7) +
geom_smooth(method = "lm", se = FALSE, color = "brown") +
scale_color_viridis_c(option = "D") +
labs(
title = "Rental Count vs Temperature with Humidity Levels",
x = "Temperature (°C)",
y = "Bike Rentals",
color = "Humidity (%)"
) +
theme_minimal()+
theme(    axis.title = element_text(size = 7),
axis.text = element_text(size = 7),
title = element_text(size = 6))
# Line chart of Bike Rentals vs Temperature
plot2 <- ggplot(df, aes(x=temp, y=cnt)) +
geom_line(color="royalblue") +
labs(title="Bike Rentals vs. Temperature",
x="Temperature",
y="Bike Rentals") +
theme_minimal()+
theme(    axis.title = element_text(size = 7),
axis.text = element_text(size = 7),
title = element_text(size = 6))
# Boxplot of Bike Rentals by Humidity Level
plot3 <- ggplot(df, aes(x=hum_new, y=cnt, fill=hum_new)) +
geom_boxplot() +
labs(title="Bike Rentals by Humidity Level",
x="Humidity Level",
y="Bike Rentals") +
scale_fill_manual(values=c("lightblue", "lightgreen", "salmon")) +
theme_minimal()+
theme(    axis.title = element_text(size = 7),
axis.text = element_text(size = 7),
title = element_text(size = 6))
# Text
text_box <- ggplot()+
annotate("text",
x= 0,
y=0,
label="desc",
col='red',
size=4)
#Infographic
infographic <- plot1 /
plot_spacer() /
(plot2| plot3) /
text_box
+
plot_layout(heights = c(1000, 0.1, 900,200) , widths = c(20,15,300))
# Scatter plot of Temperature vs Rental Count with Humidity
plot1 <- ggplot(df, aes(x = temp*100, y = cnt, color = hum*100)) +
geom_point(size = 1, alpha = 0.7) +
geom_smooth(method = "lm", se = FALSE, color = "brown") +
scale_color_viridis_c(option = "D") +
labs(
title = "Rental Count vs Temperature with Humidity Levels",
x = "Temperature (°C)",
y = "Bike Rentals",
color = "Humidity (%)"
) +
theme_minimal()+
theme(    axis.title = element_text(size = 7),
axis.text = element_text(size = 7),
title = element_text(size = 6))
# Line chart of Bike Rentals vs Temperature
plot2 <- ggplot(df, aes(x=temp, y=cnt)) +
geom_line(color="royalblue") +
labs(title="Bike Rentals vs. Temperature",
x="Temperature",
y="Bike Rentals") +
theme_minimal()+
theme(    axis.title = element_text(size = 7),
axis.text = element_text(size = 7),
title = element_text(size = 6))
# Boxplot of Bike Rentals by Humidity Level
plot3 <- ggplot(df, aes(x=hum_new, y=cnt, fill=hum_new)) +
geom_boxplot() +
labs(title="Bike Rentals by Humidity Level",
x="Humidity Level",
y="Bike Rentals") +
scale_fill_manual(values=c("lightblue", "lightgreen", "salmon")) +
theme_minimal()+
theme(    axis.title = element_text(size = 7),
axis.text = element_text(size = 7),
title = element_text(size = 6))
# Text
text_box <- ggplot()+
annotate("text",
x= 0,
y=0,
label="desc",
col='red',
size=4)
#Infographic
infographic <- plot1 /
plot_spacer() /
(plot2| plot3) +
plot_layout(heights = c(1000, 0.1, 900) , widths = c(20,15,300)) +
plot_annotation(
title = "Effect of Tempetature and Humidity on Bike Rentals"
)
# Display the infographic
infographic
setwd("~/Trent U/5240 Stats/Workshops/Workshop 08")
population <- 300
independence <- length(title_data) < (0.1 * population_size)
title_data <- readRDS("ws08-exercise-title_length.rds")
summary(title_data)
length(title_data)
population_size <- 300
# 1. Random Sampling (Assumed True as per problem statement)
# 2. Independence Check
# 3. Sample Size and Distribution Shape
# Plot the histogram to visualize the data distribution
hist(title_length, main = "Distribution of Dataset Title Lengths",
xlab = "Title Length (Number of Characters)", col = "skyblue", border = "white")
population <- 300
independence <- length(title_data) < (0.1 * population_size)
cat("Independence Condition Met:", independence, "\n")
hist(title_data, main = "Distribution of Dataset Title Lengths",
xlab = "Title Length (Number of Characters)", col = "skyblue", border = "white")
shapiro_test <- shapiro.test(title_data)
cat("Shapiro-Wilk p-value:", shapiro_test$p.value, "\n")
if (shapiro_test$p.value < 0.05) {
cat("Not Normally Distributed (p < 0.05).\n")
} else {
cat("Approximately Normally Distributed (p >= 0.05).\n")
}
# Central Limit Theorem Approximation
if (length(title_data) >= 30) {
cat("Sample size is large enough (n >= 30) for CLT to apply.\n")
} else {
cat("Sample size is not large enough (n < 30) for reliable CLT approximation.\n")
}
if (length(title_data) >= 30) {
cat("Sample size is large enough (n >= 30) for CLT to apply.\n")
} else {
cat("Sample size is not large enough (n < 30)for clt to apply .\n")
if (length(title_data) >= 30) {
cat("Sample size is large enough (n >= 30) for CLT to apply.\n")
} else {
cat("Sample size is not large enough (n < 30)for clt to apply .\n")
}
title_data <- readRDS("ws08-exercise-title_length.rds")
summary(title_data)
length(title_data)
title_data <- readRDS("ws08-exercise-title_length.rds")
summary(title_data)
length(title_data)
if (length(title_data) >= 30) {
cat("Sample size is large enough (n >= 30) for CLT to apply.\n")
} else {
cat("Sample size is not large enough (n < 30)for clt to apply .\n")
}
population <- 300
independence <- length(title_data) < (0.1 * population_size)
cat("Independence Condition Met:", independence, "\n")
hist(title_data, main = "Distribution of Dataset Title Lengths",
xlab = "Title Length (Number of Characters)", col = "skyblue", border = "white")
shapiro_test <- shapiro.test(title_data)
cat("Shapiro-Wilk p-value:", shapiro_test$p.value, "\n")
if (shapiro_test$p.value < 0.05) {
cat("Not Normally Distributed (p < 0.05).\n")
} else {
cat("Approximately Normally Distributed (p >= 0.05).\n")
}
title_data <- readRDS("ws08-exercise-title_length.rds")
summary(title_data)
length(title_data)
if (length(title_data) >= 30) {
cat("Sample size is large enough (n >= 30) for CLT to apply.\n")
} else {
cat("Sample size is not large enough (n < 30)for clt to apply .\n")
}
population <- 300
independence <- length(title_data) < (0.1 * population)
cat("Independence Condition Met:", independence, "\n")
hist(title_data, main = "Distribution of Dataset Title Lengths",
xlab = "Title Length (Number of Characters)", col = "skyblue", border = "white")
shapiro_test <- shapiro.test(title_data)
cat("Shapiro-Wilk p-value:", shapiro_test$p.value, "\n")
if (shapiro_test$p.value < 0.05) {
cat("Not Normally Distributed (p < 0.05).\n")
} else {
cat("Approximately Normally Distributed (p >= 0.05).\n")
}
setwd("~/Trent U/5240 Stats/5240 Assignments/R Assignment 03")
setwd("~/Trent U/5240 Stats/5240 Assignments/R Assignment 03")
income <- readRDS("income.rds")
head(income, 5)
income <- readRDS("income.rds")
hist(income)
hist(income,breaks = "Sturges")
hist(income,breaks = 20)
hist(income,breaks = 10)
hist(income,breaks = 50)
hist(income,breaks = 500)
hist(income,breaks = 100)
hist(income,breaks = 30)
hist(income/1000,breaks = 30)
hist(income/1000,breaks = 30,
xlab = "Income in k",
ylab = "Frequency",
col = "skyblue")
hist(income/1000,breaks = seq(50000, 200000, by = 10000), xlim = c(50000, 200000),
xlab = "Income in k",
ylab = "Frequency",
col = "skyblue")
hist(income,breaks = seq(50000, 200000, by = 10000), xlim = c(50000, 200000),
xlab = "Income in k",
ylab = "Frequency",
col = "skyblue")
hist(income,breaks = seq(50000, 100000, by = 10000), xlim = c(50000, 100000),
xlab = "Income in k",
ylab = "Frequency",
col = "skyblue")
hist(income,breaks = seq(50000, 10000, by = 10000), xlim = c(50000, 100000),
xlab = "Income in k",
ylab = "Frequency",
col = "skyblue")
hist(income,breaks = seq(50, 100, by = 10), xlim = c(50, 1000),
xlab = "Income in k",
ylab = "Frequency",
col = "skyblue")
hist(income/1000,breaks = seq(5000, 200000, by = 10000), xlim = c(1000, 200000),
xlab = "Income in k",
ylab = "Frequency",
col = "skyblue")
hist(income/1000,breaks = seq(5000, 200000, by = 10000), xlim = c(1000, 2000000),
xlab = "Income in k",
ylab = "Frequency",
col = "skyblue")
hist(income/1000,breaks = 30,
xlab = "Income in k",
ylab = "Frequency",
col = "skyblue")
hist(income/1000,breaks = 30,
xlab = "Income in k$",
ylab = "Frequency",
col = "skyblue")
hist(income/1000,breaks = 30,
xlab = "Income in Thousand Dollars",
ylab = "Frequency",
col = "skyblue")
hist(income/1000,breaks = 30,
xlab = "Income in Thousand Dollars",
ylab = "Frequency",
col = "skyblue"),
hist(income/1000,breaks = 30,
xlab = "Income in Thousand Dollars",
ylab = "Frequency",
col = "skyblue",
title = "Distribution of Income")
hist(income/1000,breaks = 30,
xlab = "Income in Thousand Dollars",
ylab = "Frequency",
col = "skyblue",
main = "Distribution of Income"
)
# QQ-Plot
qqnorm(income)          # Create the QQ plot
qqline(income, col = "red")  # Add the reference line
# Boxplot
boxplot(income,
main = "Boxplot of Income",
ylab = "Income",
col = "lightblue")
shapiro.test(income)
# QQ-Plot
qqnorm(income/1000)          # Create the QQ plot
qqline(income, col = "red")  # Add the reference line
# QQ-Plot
qqnorm(income/1000)          # Create the QQ plot
qqline(income/1000, col = "red")  # Add the reference line
# QQ-Plot
qqnorm(income/1000,
main = "QQ-plot for income",
ylab = "Quantiles in Thousand Dollars")          # Create the QQ plot
qqline(income/1000, col = "red")  # Add the reference line
# QQ-Plot
qqnorm(income/1000,
main = "QQ-plot for income",
ylab = "Sample Quantiles in Thousand Dollars",
col = "skyblue")
qqline(income/1000, col = "red")
library(infer)
library(ggplot2)
set.seed(0862899) # Student number
bootstrap_samples <- income %>%
specify(response = income) %>%
generate(reps = 4000, type = "bootstrap") %>%
calculate(stat = "mean")
income <- readRDS("income.rds")
income_df <- data.frame(income)
hist(income_df/1000,breaks = 30,
xlab = "Income in Thousand Dollars",
ylab = "Frequency",
col = "skyblue",
main = "Distribution of Income"
)
hist(income_df$income/1000,breaks = 30,
xlab = "Income in Thousand Dollars",
ylab = "Frequency",
col = "skyblue",
main = "Distribution of Income"
)
# QQ-Plot
qqnorm(income_df$income/1000,
main = "QQ-plot for income",
ylab = "Sample Quantiles in Thousand Dollars",
col = "skyblue")
qqline(income_df$income/1000, col = "red")
# Boxplot
boxplot(income_df$income,
main = "Boxplot of Income",
ylab = "Income",
col = "lightblue")
# Boxplot
boxplot(income_df$income,
main = "Boxplot of Income",
ylab = "Income",
col = "lightblue")
shapiro.test(income_df$income)
set.seed(0862899) # Student number
bootstrap_samples <- income_df$income %>%
specify(response = income_df$income) %>%
generate(reps = 4000, type = "bootstrap") %>%
calculate(stat = "mean")
set.seed(0862899) # Student number
bootstrap_samples <- income_df$income %>%
specify(response = income_df) %>%
generate(reps = 4000, type = "bootstrap") %>%
calculate(stat = "mean")
set.seed(0862899) # Student number
bootstrap_samples <- income_df %>%
specify(response = income_df) %>%
generate(reps = 4000, type = "bootstrap") %>%
calculate(stat = "mean")
set.seed(0862899) # Student number
bootstrap_samples <- income_df$income %>%
specify(response = income_df) %>%
generate(reps = 4000, type = "bootstrap") %>%
calculate(stat = "mean")
set.seed(0862899) # Student number
bootstrap_samples <- income_df %>%
specify(response = income) %>%
generate(reps = 4000, type = "bootstrap") %>%
calculate(stat = "mean")
ggplot(bootstrap_samples, aes(x = stat)) +
geom_histogram(binwidth = 0.5, fill = "lightblue", color = "black") +
labs(title = "Histogram of Bootstrap Sample Means", x = "Sample Mean", y = "Frequency") +
theme_minimal()
ggplot(bootstrap_samples, aes(x = stat)) +
geom_histogram(binwidth = 10, fill = "lightblue", color = "black") +
labs(title = "Histogram of Bootstrap Sample Means", x = "Sample Mean", y = "Frequency") +
theme_minimal()
ggplot(bootstrap_samples, aes(x = stat)) +
geom_histogram( fill = "lightblue", color = "black") +
labs(title = "Histogram of Bootstrap Sample Means", x = "Sample Mean", y = "Frequency") +
theme_minimal()
ggplot(bootstrap_samples, aes(x = stat)) +
geom_histogram(binwidth = 40 ,fill = "lightblue", color = "black") +
labs(title = "Histogram of Bootstrap Sample Means", x = "Sample Mean", y = "Frequency") +
theme_minimal()
ggplot(bootstrap_samples, aes(x = stat)) +
geom_histogram(binwidth = 30 ,fill = "lightblue", color = "black") +
labs(title = "Histogram of Bootstrap Sample Means", x = "Sample Mean", y = "Frequency") +
theme_minimal()
ggplot(bootstrap_samples, aes(x = stat)) +
geom_histogram(binwidths = 30 ,fill = "lightblue", color = "black") +
labs(title = "Histogram of Bootstrap Sample Means", x = "Sample Mean", y = "Frequency") +
theme_minimal()
ggplot(bootstrap_samples, aes(x = stat)) +
geom_histogram(binwidths = 300 ,fill = "lightblue", color = "black") +
labs(title = "Histogram of Bootstrap Sample Means", x = "Sample Mean", y = "Frequency") +
theme_minimal()
ggplot(bootstrap_samples, aes(x = stat)) +
geom_histogram(binwidth = 300 ,fill = "lightblue", color = "black") +
labs(title = "Histogram of Bootstrap Sample Means", x = "Sample Mean", y = "Frequency") +
theme_minimal()
ggplot(bootstrap_samples, aes(x = stat)) +
geom_histogram(binwidth = 100 ,fill = "lightblue", color = "black") +
labs(title = "Histogram of Bootstrap Sample Means", x = "Sample Mean", y = "Frequency") +
theme_minimal()
ggplot(bootstrap_samples, aes(x = stat)) +
geom_histogram(binwidth = 1000 ,fill = "lightblue", color = "black") +
labs(title = "Histogram of Bootstrap Sample Means", x = "Sample Mean", y = "Frequency") +
theme_minimal()
ggplot(bootstrap_samples, aes(x = stat)) +
geom_histogram(binwidth = 500 ,fill = "lightblue", color = "black") +
labs(title = "Histogram of Bootstrap Sample Means", x = "Sample Mean", y = "Frequency") +
theme_minimal()
ggplot(bootstrap_samples, aes(x = stat)) +
geom_histogram(binwidth = 500 ,fill = "lightblue") +
labs(title = "Histogram of Bootstrap Sample Means", x = "Sample Mean", y = "Frequency") +
theme_minimal()
ggplot(bootstrap_samples, aes(x = stat)) +
geom_histogram(binwidth = 500 ,fill = "lightblue", color = "black") +
labs(title = "Histogram of Bootstrap Sample Means", x = "Sample Mean", y = "Frequency") +
theme_minimal()
ggplot(bootstrap_samples, aes(x = stat)) +
geom_histogram(binwidth = 5000 ,fill = "lightblue", color = "black") +
labs(title = "Histogram of Bootstrap Sample Means", x = "Sample Mean", y = "Frequency") +
theme_minimal()
ggplot(bootstrap_samples, aes(x = stat)) +
geom_histogram(binwidth = 500 ,fill = "lightblue", color = "black") +
labs(title = "Histogram of Bootstrap Sample Means", x = "Sample Mean", y = "Frequency") +
theme_minimal()
# Plot QQ-Plot of the bootstrap sample means
qqnorm(bootstrap_samples$stat, main = "QQ-Plot of Bootstrap Sample Means")
qqline(bootstrap_samples$stat, col = "red")
ggplot(bootstrap_samples/1000, aes(x = stat)) +
geom_histogram(binwidth = 500 ,fill = "lightblue", color = "black") +
labs(title = "Histogram of Bootstrap Sample Means", x = "Sample Mean income (In Thousand $)", y = "Frequency") +
theme_minimal()
ggplot(bootstrap_samples, aes(x = stat/1000)) +
geom_histogram(binwidth = 500 ,fill = "lightblue", color = "black") +
labs(title = "Histogram of Bootstrap Sample Means", x = "Sample Mean income (In Thousand $)", y = "Frequency") +
theme_minimal()
ggplot(bootstrap_samples, aes(x = stat)) +
geom_histogram(binwidth = 500 ,fill = "lightblue", color = "black") +
labs(title = "Histogram of Bootstrap Sample Means", x = "Sample Mean income (In Thousand $)", y = "Frequency") +
theme_minimal()
ggplot(bootstrap_samples, aes(x = stat)) +
geom_histogram(binwidth = 500 ,fill = "lightblue", color = "black") +
labs(title = "Histogram of Bootstrap Sample Means", x = "Sample Mean Income", y = "Frequency") +
theme_minimal()
ggplot(bootstrap_samples, aes(x = stat)) +
geom_histogram(binwidth = 300 ,fill = "lightblue", color = "black") +
labs(title = "Histogram of Bootstrap Sample Means", x = "Sample Mean Income", y = "Frequency") +
theme_minimal()
ggplot(bootstrap_samples, aes(x = stat)) +
geom_histogram(binwidth = 500 ,fill = "lightblue", color = "black") +
labs(title = "Histogram of Bootstrap Sample Means", x = "Sample Mean Income", y = "Frequency") +
theme_minimal()
# Plot QQ-Plot of the bootstrap sample means
qqnorm(bootstrap_samples$stat, main = "QQ-Plot of Bootstrap Sample Income Means",ylab = "Sample Income Quantiles")
qqline(bootstrap_samples$stat, col = "red")
# Plot QQ-Plot of the bootstrap sample means
qqnorm(bootstrap_samples$stat, main = "QQ-Plot of Bootstrap Sample Income Means",ylab = "Sample Income")
qqline(bootstrap_samples$stat, col = "red")
# Plot QQ-Plot of the bootstrap sample means
qqnorm(bootstrap_samples$stat, main = "QQ-Plot of Bootstrap Sample Means",)
qqline(bootstrap_samples$stat, col = "red")
# Plot QQ-Plot of the bootstrap sample means
qqnorm(bootstrap_samples$stat, main = "QQ-Plot of Bootstrap Sample Means")
qqline(bootstrap_samples$stat, col = "red")
# Plot QQ-Plot of the bootstrap sample means
qqnorm(bootstrap_samples$stat, main = "QQ-Plot of Bootstrap Sample Income Means",ylab = "Sample Income Quantiles")
qqline(bootstrap_samples$stat, col = "red")
boxplot(bootstrap_samples$stat,
main = "Boxplot of Bootstrap Sample Means",
ylab = "Sample Mean",
col = "lightblue")
boxplot(bootstrap_samples$stat,
main = "Boxplot of Bootstrap Sample Income Means",
ylab = "Sample Mean",
col = "lightblue")
boxplot(bootstrap_samples$stat,
main = "Boxplot of Bootstrap Sample Income Means",
ylab = "Sample Income Mean",
col = "lightblue")
confidence_interval <- quantile(bootstrap_samples$stat, c(0.05, 0.95))
confidence_interval
ttest <- t.test(bootstrap_samples$stat, conf.level = 0.90)
ttest
ttest <- t.test(bootstrap_samples$stat, conf.level = 0.90)
ttest
shapiro.test(bootstrap_samples$stat)
n_yes <- 16870
total <- 21355
p <- n_yes/total
p
