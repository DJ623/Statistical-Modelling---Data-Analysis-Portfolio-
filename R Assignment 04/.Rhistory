library(infer)
library(tibble)
library(tidyverse)
set.seed(8586)
# Data
obs <- data.frame(
id = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36),
disco = c(45.994, 46.414, 45.414, 46.268, 46.509, 45.403, 46.234, 45.588, 46.4, 46.274, 46.274, 46.641, 46.169, 46.503, 45.587, 45.298, 46.534, 45.585, 46.266, 46.257, 46.049, 45.889, 46.025, 45.913, 46.583, 45.615, 45.943, 46.518, 45.598, 45.985, 46.689, 46.289, 45.505, 45.954, 46.564, 45.252),
classical = c(46.363, 46.222, 45.308, 46.02, 46.475, 45.23, 46.208, 45.449, 46.322, 46.178, 46.188, 46.88, 46.866, 46.635, 45.955, 45.083, 46.368, 46.184, 46.008, 46.011, 45.912, 45.821, 45.909, 45.787, 46.724, 45.613, 45.897, 46.517, 45.763, 45.987, 46.442, 46.325, 45.533, 46.411, 47.122, 45.221))
# Calculate the differences (classical - disco)
obs$difference <- obs$classical - obs$disco
# Perform the bootstrap test
library(infer)
bootstrap_results <- obs %>%
specify(response = difference) %>%
generate(reps = 10000, type = "bootstrap") %>%
calculate(stat = "mean")
# Calculate the p-value
observed_stat <- mean(obs$difference)
p_value <- bootstrap_results %>%
filter(stat >= observed_stat) %>%
summarise(p_value = n()/10000)
p_value
# Set seed for reproducibility
# Calculate the 86% confidence interval using bootstrap-t
bootstrap_t_results <- obs %>%
specify(response = difference) %>%
generate(reps = 10000, type = "bootstrap") %>%
calculate(stat = "mean") %>%
get_confidence_interval(level = 0.86)
bootstrap_t_results
# Load necessary library
# Create the dataset
obs <- data.frame(
id = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36),
disco = c(45.994, 46.414, 45.414, 46.268, 46.509, 45.403, 46.234, 45.588, 46.4, 46.274, 46.274, 46.641, 46.169, 46.503, 45.587, 45.298, 46.534, 45.585, 46.266, 46.257, 46.049, 45.889, 46.025, 45.913, 46.583, 45.615, 45.943, 46.518, 45.598, 45.985, 46.689, 46.289, 45.505, 45.954, 46.564, 45.252),
classical = c(46.363, 46.222, 45.308, 46.02, 46.475, 45.23, 46.208, 45.449, 46.322, 46.178, 46.188, 46.88, 46.866, 46.635, 45.955, 45.083, 46.368, 46.184, 46.008, 46.011, 45.912, 45.821, 45.909, 45.787, 46.724, 45.613, 45.897, 46.517, 45.763, 45.987, 46.442, 46.325, 45.533, 46.411, 47.122, 45.221)
)
# Create the difference (classical - disco)
obs$difference <- obs$classical - obs$disco
# Hypothesis testing
set.seed(8586)
obs_test <- obs %>%
specify(response = difference) %>%   # Specify the response variable
hypothesize(null = "point", mu = 0) %>%  # Null hypothesis: mean difference = 0
generate(reps = 10000, type = "bootstrap") %>%  # Generate bootstrap samples
calculate(stat = "mean")  # Calculate the mean difference for each sample
# Calculate p-value (two-tailed test)
obs_mean <- mean(obs$difference)
p_value <- obs_test %>%
summarize(p_value = mean(abs(stat) >= abs(obs_mean)))
# Print p-value
print(paste("P-value =", p_value$p_value))
# Confidence Interval
set.seed(8586)
ci <- obs %>%
specify(response = difference) %>%  # Specify the response variable
generate(reps = 10000, type = "bootstrap") %>%  # Generate bootstrap samples
calculate(stat = "mean") %>%  # Calculate mean differences
get_confidence_interval(level = 0.86, type = "percentile")  # Get 86% CI
# Print confidence interval
print(paste("86% Confidence Interval: [", ci$lower_ci, ",", ci$upper_ci, "]"))
# Decision based on p-value
if (p_value$p_value < 0.05) {
print("Decision: Reject the null hypothesis")
} else {
print("Decision: Fail to reject the null hypothesis")
}
# Load necessary library
# Create the dataset
obs <- data.frame(
id = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36),
disco = c(45.994, 46.414, 45.414, 46.268, 46.509, 45.403, 46.234, 45.588, 46.4, 46.274, 46.274, 46.641, 46.169, 46.503, 45.587, 45.298, 46.534, 45.585, 46.266, 46.257, 46.049, 45.889, 46.025, 45.913, 46.583, 45.615, 45.943, 46.518, 45.598, 45.985, 46.689, 46.289, 45.505, 45.954, 46.564, 45.252),
classical = c(46.363, 46.222, 45.308, 46.02, 46.475, 45.23, 46.208, 45.449, 46.322, 46.178, 46.188, 46.88, 46.866, 46.635, 45.955, 45.083, 46.368, 46.184, 46.008, 46.011, 45.912, 45.821, 45.909, 45.787, 46.724, 45.613, 45.897, 46.517, 45.763, 45.987, 46.442, 46.325, 45.533, 46.411, 47.122, 45.221))
# Create the difference (classical - disco)
obs$difference <- obs$classical - obs$disco
# Bootstrap approach: resample differences and calculate the mean of each resample
n <- length(obs$difference)
reps <- 10000
bootstrap_means <- replicate(reps, {
resample <- sample(obs$difference, size = n, replace = TRUE)
mean(resample)
})
# Calculate the observed mean difference
observed_mean_diff <- mean(obs$difference)
# Calculate the p-value as the proportion of bootstrap samples greater than or equal to the observed mean difference
p_value <- mean(abs(bootstrap_means) >= abs(observed_mean_diff))
p_value
set.seed(8586)  # Ensure reproducibility
# Calculate the 86% confidence interval using the bootstrap distribution
lower_bound <- quantile(bootstrap_means, probs = 0.07)  # 100% - 86% = 14%, so 7% on each side
upper_bound <- quantile(bootstrap_means, probs = 0.93)
lower_bound
upper_bound
# Load necessary library
# Create the dataset
obs <- data.frame(
id = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36),
disco = c(45.994, 46.414, 45.414, 46.268, 46.509, 45.403, 46.234, 45.588, 46.4, 46.274, 46.274, 46.641, 46.169, 46.503, 45.587, 45.298, 46.534, 45.585, 46.266, 46.257, 46.049, 45.889, 46.025, 45.913, 46.583, 45.615, 45.943, 46.518, 45.598, 45.985, 46.689, 46.289, 45.505, 45.954, 46.564, 45.252),
classical = c(46.363, 46.222, 45.308, 46.02, 46.475, 45.23, 46.208, 45.449, 46.322, 46.178, 46.188, 46.88, 46.866, 46.635, 45.955, 45.083, 46.368, 46.184, 46.008, 46.011, 45.912, 45.821, 45.909, 45.787, 46.724, 45.613, 45.897, 46.517, 45.763, 45.987, 46.442, 46.325, 45.533, 46.411, 47.122, 45.221)
)
# Create the difference (classical - disco)
obs$difference <- obs$classical - obs$disco
# Set seed and perform bootstrap hypothesis testing
set.seed(8586)
obs_test <- obs %>%
specify(response = difference) %>%   # Specify the response variable
hypothesize(null = "point", mu = 0) %>%  # Null hypothesis: mean difference = 0
generate(reps = 10000, type = "bootstrap") %>%  # Generate bootstrap samples
calculate(stat = "mean")  # Calculate the mean difference for each sample
# Calculate the observed mean difference
obs_mean <- mean(obs$difference)
# Calculate the one-tailed p-value
p_value <- obs_test %>%
summarize(p_value = mean(stat >= obs_mean))
# Print p-value
print(paste("P-value =", p_value$p_value))
# Set seed and perform bootstrap for confidence interval
set.seed(8586)
ci <- obs %>%
specify(response = difference) %>%  # Specify the response variable
generate(reps = 10000, type = "bootstrap") %>%  # Generate bootstrap samples
calculate(stat = "mean") %>%  # Calculate mean differences
get_confidence_interval(level = 0.86, type = "percentile")  # Get 86% CI
# Print the confidence interval
print(paste("86% Confidence Interval: [", ci$lower_ci, ",", ci$upper_ci, "]"))
# Data
obs <- data.frame(
id = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30),
warrior = c(71.063, 71.205, 71.135, 72.226, 71.161, 71.622, 70.949, 71.257, 72.022, 71.446, 71.416, 71.575, 73.426, 71.743, 71.386, 70.961, 71.314, 71.541, 71.397, 71.046, 71.252, 72.609, 71.094, 71.955, 72.265, 72.829, 71.4, 71.486, 71.296, 72.01),
house = c(84.977, 76.486, 77.404, 82.252, 73.154, 78.475, 76.339, 77.376, 74.231, 84.857, 72.617, 79.004, 82.675, 73.804, 79.042, 78.628, 78.609, 78.904, 70.053, 77.801, 76.596, 79.109, 74.177, 82.023, 76.979, 80.804, 73.882, 72.781, 80.277, 79.275)
)
# Calculate the differences (house - warrior)
obs$difference <- obs$house - obs$warrior
# Perform the t-test for paired samples
t_test_result <- t.test(obs$difference)
# Get the p-value from the t-test result
t_test_result$p.value
# Get the 93% confidence interval from the t-test result
t_test_result$conf.int
data <- read_csv(file='file1114a272bc0b60.csv');
str(data)
model <-lm(data$heart_rate~data$heart_rate);
model
model <-lm(data$heart_rate~data$heart_rate);
model
plot(data$heart_rate~data$exercise_minutes);
abline(model);
model <-lm(data$heart_rate~data$heart_rate);
model
plot(data$heart_rate~data$exercise_minutes);
abline(model);
qqplot(data$heart_rate~data$exercise_minutes)
model <-lm(data$heart_rate~data$heart_rate);
model
plot(data$heart_rate~data$exercise_minutes);
abline(model);
qqplot(data$heart_rate,data$exercise_minutes)
model <-lm(data$heart_rate~data$heart_rate);
model
plot(data$heart_rate~data$exercise_minutes);
abline(model);
qqplot(data$heart_rate,data$exercise_minutes,model)
model <-lm(data$heart_rate~data$heart_rate);
model
plot(data$heart_rate~data$exercise_minutes);
abline(model);
qqplot(model)
model <-lm(data$heart_rate~data$heart_rate);
model
plot(data$heart_rate~data$exercise_minutes);
abline(model);
qqplot(data$heart_rate,data$exercise_minutes)
# Diagnostic Plots
par(mfrow = c(2, 2))  # Arrange plots in 2x2 layout
plot(model)  # Automatically generates diagnostic plots
summary(model)
model <-lm(data$heart_rate~data$exercise_minutes);
model
plot(data$heart_rate~data$exercise_minutes);
abline(model);
qqplot(data$heart_rate,data$exercise_minutes)
# Diagnostic Plots
par(mfrow = c(2, 2))  # Arrange plots in 2x2 layout
plot(model)  # Automatically generates diagnostic plots
# Diagnostic Plots
# Arrange plots in 2x2 layout
plot(model)  # Automatically generates diagnostic plots
summary(model)
data <- read_csv(file='file1117165d0ea779.csv');
str(data)
model <-lm(data$test_score~data$study_hours);
model
plot(data$test_score~data$study_hours);
abline(model);
qqplot(data$test_score,data$study_hours)
# Diagnostic Plots
# Arrange plots in 2x2 layout
plot(model)  # Automatically generates diagnostic plots
summary(model)
data <- read_csv(file='file1117ef77562b96.csv');
str(data)
model <-lm(data$productivity_score~data$cups_of_coffee);
model
plot(data$productivity_score$cups_of_coffee);
model <-lm(data$productivity_score~data$cups_of_coffee);
model
plot(data$productivity_score~data$cups_of_coffee);
abline(model);
qqplot(data$productivity_score~data$cups_of_coffee)
# Diagnostic Plots
# Arrange plots in 2x2 layout
plot(model)  # Automatically generates diagnostic plots
summary(model)
cor.test(data$productivity_score~data$cups_of_coffee)
cor.test(data$cups_of_coffee, data$productivity_score)
# Extract the estimated slope (beta_1) and its standard error
slope_estimate <- summary_model$coefficients[2, 1]  # Slope (beta_1)
summary_model<-summary(model)
# Extract the estimated slope (beta_1) and its standard error
slope_estimate <- summary_model$coefficients[2, 1]  # Slope (beta_1)
se_slope <- summary_model$coefficients[2, 2]        # Standard error of the slope
# Degrees of freedom
df <- summary_model$df[2]
# Critical t-value for 99% confidence (alpha = 0.01, so alpha/2 = 0.005)
t_value <- qt(0.995, df)  # 0.995 corresponds to the 99% CI (two-tailed)
# Calculate the margin of error
margin_of_error <- t_value * se_slope
# Confidence interval for the slope
conf_interval <- c(slope_estimate - margin_of_error, slope_estimate + margin_of_error)
# Display the confidence interval
conf_interval
# Test statistic and degrees of freedom
test_statistic <- 0.0188
df <- 1
# Find the p-value
p_value <- pchisq(test_statistic, df, lower.tail = FALSE)
p_value
# Test statistic and degrees of freedom
# Set seed for reproducibility
set.seed(7930)
# Create the observed contingency table
observed <- matrix(c(6, 44, 10, 68), nrow = 2, byrow = TRUE)
colnames(observed) <- c("Bought Diapers", "Did Not Buy Diapers")
rownames(observed) <- c("Beer", "No Beer")
# Perform the chi-squared test using the observed data
chi_squared_test <- chisq.test(observed)
# Print the observed test statistic
chi_squared_test$statistic
# To simulate the test statistic distribution using nsim = 7000
nsim <- 7000
simulated_stats <- replicate(nsim, {
# Create simulated table under the null hypothesis (independence)
simulated_table <- matrix(sample(observed, size = length(observed), replace = TRUE),
nrow = 2)
# Calculate the chi-squared statistic for each simulation
chisq.test(simulated_table)$statistic
})
# Print the observed test statistic
observed_test_statistic <- chi_squared_test$statistic
observed_test_statistic
# Simulate and print the p-value (proportion of simulated stats greater than or equal to the observed)
simulated_p_value <- mean(simulated_stats >= observed_test_statistic)
simulated_p_value
# Data
obs <- data.frame(
id = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30),
warrior = c(71.063, 71.205, 71.135, 72.226, 71.161, 71.622, 70.949, 71.257, 72.022, 71.446, 71.416, 71.575, 73.426, 71.743, 71.386, 70.961, 71.314, 71.541, 71.397, 71.046, 71.252, 72.609, 71.094, 71.955, 72.265, 72.829, 71.4, 71.486, 71.296, 72.01),
house = c(84.977, 76.486, 77.404, 82.252, 73.154, 78.475, 76.339, 77.376, 74.231, 84.857, 72.617, 79.004, 82.675, 73.804, 79.042, 78.628, 78.609, 78.904, 70.053, 77.801, 76.596, 79.109, 74.177, 82.023, 76.979, 80.804, 73.882, 72.781, 80.277, 79.275)
)
# Differences
obs$difference <- obs$house - obs$warrior
# Perform paired t-test
t_test_result <- t.test(obs$house, obs$warrior, paired = TRUE)
# Display results
t_test_result
t.test(obs$house, obs$warrior, paired = TRUE, conf.level = 0.93)
setwd("~/Trent U/5240 Stats/5240 Assignments/R Assignment 04")
summary(prison);
prison <- read.csv(file='canada_incarceration.csv');
str(prison);
summary(prison);
# Data
incarcerated <- prison$Incarcerated;
population_proportion <- prison$Proportion_of_Pop
population_total <- sum(incarcerated) / sum(population_proportion)  # Estimate total population
# Calculate expected counts
expected <- population_proportion * population_total
# Barplot for observed counts
barplot(incarcerated,
names.arg = c("Indigenous", "Asian", "Black", "Caucasian", "Hispanic", "Other"),
col = "blue", main = "Observed Counts of Incarcerated Individuals",
ylab = "Counts", xlab = "Group")
# Side-by-side barplot for observed and expected counts
counts <- rbind(incarcerated, expected)
barplot(counts,
beside = TRUE,
names.arg = c("Indigenous", "Asian", "Black", "Caucasian", "Hispanic", "Other"),
col = c("blue", "red"),
legend.text = c("Observed", "Expected"),
main = "Observed vs. Expected Counts",
ylab = "Counts", xlab = "Group")
barplot(counts,
beside = TRUE,
names.arg = c("Indigenous", "Asian", "Black", "Caucasian", "Hispanic", "Other"),
col = c("black", "red"),
legend.text = c("Observed", "Expected"),
main = "Observed vs. Expected Counts",
ylab = "Counts", xlab = "Group")
# Calculate expected counts
expected <- population_proportion * population_total
barplot(counts,
beside = TRUE,
names.arg = c("Indigenous", "Asian", "Black", "Caucasian", "Hispanic", "Other"),
col = c("black", "red"),
legend.text = c("Observed", "Expected"),
main = "Observed vs. Expected Counts",
ylab = "Counts", xlab = "Group")
# Barplot for observed counts
barplot(incarcerated,
names.arg = c("Indigenous", "Asian", "Black", "Caucasian", "Hispanic", "Other"),
col = "blue", main = "Observed Counts of Incarcerated Individuals",
ylab = "Counts", xlab = "Group")
# Data
incarcerated <- prison$Incarcerated;
population_proportion <- prison$Proportion_of_Pop
population_total <- sum(incarcerated) / sum(population_proportion)  # Estimate total population
# Calculate expected counts
expected <- population_proportion * population_total
# Barplot for observed counts
barplot(incarcerated,
names.arg = c("Indigenous", "Asian", "Black", "Caucasian", "Hispanic", "Other"),
col = "blue", main = "Observed Counts of Incarcerated Individuals",
ylab = "Counts", xlab = "Group")
# Side-by-side barplot for observed and expected counts
counts <- rbind(incarcerated, expected)
barplot(counts,
beside = TRUE,
names.arg = c("Indigenous", "Asian", "Black", "Caucasian", "Hispanic", "Other"),
col = c("black", "red"),
legend.text = c("Observed", "Expected"),
main = "Observed vs. Expected Counts",
ylab = "Counts", xlab = "Group")
incarcerated <- prison$Incarcerated;
population_proportion <- prison$Proportion_of_Pop
population_total <- sum(incarcerated) / sum(population_proportion)
expected <- population_proportion * population_total
# barplot
barplot(incarcerated,
names.arg = c("Indigenous", "Asian", "Black", "Caucasian", "Hispanic", "Other"),
col = "navy", main = "Observed Counts of Incarcerated Individuals",
ylab = "Counts", xlab = "Group")
counts <- rbind(incarcerated, expected)
barplot(counts,
beside = TRUE,
names.arg = c("Indigenous", "Asian", "Black", "Caucasian", "Hispanic", "Other"),
col = c("black", "red"),
legend.text = c("Observed", "Expected"),
main = "Observed vs. Expected Counts",
ylab = "Counts", xlab = "Group")
incarcerated <- prison$Incarcerated;
population_proportion <- prison$Proportion_of_Pop
population_total <- sum(incarcerated) / sum(population_proportion)
expected <- population_proportion * population_total
# barplot
barplot(incarcerated,
names.arg = c("Indigenous", "Asian", "Black", "Caucasian", "Hispanic", "Other"),
col = "lightgreen", main = "Observed Counts of Incarcerated Individuals",
ylab = "Counts", xlab = "Group")
counts <- rbind(incarcerated, expected)
barplot(counts,
beside = TRUE,
names.arg = c("Indigenous", "Asian", "Black", "Caucasian", "Hispanic", "Other"),
col = c("black", "red"),
legend.text = c("Observed", "Expected"),
main = "Observed vs. Expected Counts",
ylab = "Counts", xlab = "Group")
incarcerated <- prison$Incarcerated;
population_proportion <- prison$Proportion_of_Pop
population_total <- sum(incarcerated) / sum(population_proportion)
expected <- population_proportion * population_total
# barplot
barplot(incarcerated,
names.arg = c("Indigenous", "Asian", "Black", "Caucasian", "Hispanic", "Other"),
col = "lightblue", main = "Observed Counts of Incarcerated Individuals",
ylab = "Counts", xlab = "Group")
counts <- rbind(incarcerated, expected)
barplot(counts,
beside = TRUE,
names.arg = c("Indigenous", "Asian", "Black", "Caucasian", "Hispanic", "Other"),
col = c("black", "red"),
legend.text = c("Observed", "Expected"),
main = "Observed vs. Expected Counts",
ylab = "Counts", xlab = "Group")
chisq_test <- chisq.test(x = prison$Incarcerated, p = prison$Proportion_of_Pop)
chisq_test
incarcerated <- prison$Incarcerated;
population_proportion <- prison$Proportion_of_Pop
population_total <- sum(incarcerated) / sum(population_proportion)
expected <- population_proportion * population_total
# barplot
barplot(incarcerated,
names.arg = c("Indigenous", "Asian", "Black", "Caucasian", "Hispanic", "Other"),
col = "lightblue", main = "Observed Counts of Incarcerated Individuals",
ylab = "Counts", xlab = "Group",cex.axis = 0.8,cex.names = 0.7)
counts <- rbind(incarcerated, expected)
barplot(counts,
beside = TRUE,
names.arg = c("Indigenous", "Asian", "Black", "Caucasian", "Hispanic", "Other"),
col = c("black", "red"),
legend.text = c("Observed", "Expected"),
main = "Observed vs. Expected Counts",
ylab = "Counts", xlab = "Group",cex.axis = 0.8,cex.names = 0.7)
incarcerated <- prison$Incarcerated;
population_proportion <- prison$Proportion_of_Pop
population_total <- sum(incarcerated) / sum(population_proportion)
expected <- population_proportion * population_total
# barplot
barplot(incarcerated,
names.arg = c("Indigenous", "Asian", "Black", "Caucasian", "Hispanic", "Other"),
col = "lightblue", main = "Observed Counts of Incarcerated Individuals",
ylab = "Counts", xlab = "Group",cex.axis = 0.7,cex.names = 0.7)
counts <- rbind(incarcerated, expected)
barplot(counts,
beside = TRUE,
names.arg = c("Indigenous", "Asian", "Black", "Caucasian", "Hispanic", "Other"),
col = c("black", "red"),
legend.text = c("Observed", "Expected"),
main = "Observed vs. Expected Counts",
ylab = "Counts", xlab = "Group",cex.axis = 0.7,cex.names = 0.7)
chocolates <- read.csv(file='chocolate_antioxidants.csv');
summary(chocolates);
str(chocolates);
summary(chocolates);
# Reshape the data into long format for easier plotting
library(tidyr)
chocolate_long <- pivot_longer(chocolate_data, cols = c("DC", "DC_MK", "MC"),
names_to = "chocolate_type", values_to = "antioxidant_capacity")
# Reshape the data into long format for easier plotting
library(tidyr)
chocolate_long <- pivot_longer(chocolate, cols = c("DC", "DC_MK", "MC"),
names_to = "chocolate_type", values_to = "antioxidant_capacity")
chocolate <- read.csv(file='chocolate_antioxidants.csv');
str(chocolate);
summary(chocolate);
# Reshape the data into long format for easier plotting
library(tidyr)
chocolate_long <- pivot_longer(chocolate, cols = c("DC", "DC_MK", "MC"),
names_to = "chocolate_type", values_to = "antioxidant_capacity")
# Boxplot
boxplot(antioxidant_capacity ~ chocolate_type, data = chocolate_long,
main = "Total Antioxidant Capacity by Chocolate Type",
xlab = "Chocolate Type", ylab = "Total Antioxidant Capacity",
col = c("lightblue", "lightgreen", "lightcoral"), border = "darkblue", notch = TRUE)
# Reshape the data into long format for easier plotting
library(tidyr)
chocolate_long <- pivot_longer(chocolate, cols = c("DC", "DC_MK", "MC"),
names_to = "chocolate_type", values_to = "antioxidant_capacity")
# Boxplot
boxplot(antioxidant_capacity ~ chocolate_type, data = chocolate,
main = "Total Antioxidant Capacity by Chocolate Type",
xlab = "Chocolate Type", ylab = "Total Antioxidant Capacity",
col = c("lightblue", "lightgreen", "lightcoral"), border = "darkblue", notch = TRUE)
# Reshape the data into long format for easier plotting
library(tidyr)
# Boxplot using the original format
boxplot(chocolate_data$DC, chocolate_data$DC_MK, chocolate_data$MC,
names = c("Dark Chocolate", "Dark Chocolate with Milk", "Milk Chocolate"),
main = "Total Antioxidant Capacity by Chocolate Type",
xlab = "Chocolate Type", ylab = "Total Antioxidant Capacity",
col = c("lightblue", "lightgreen", "lightcoral"), border = "darkblue", notch = TRUE)
# Reshape the data into long format for easier plotting
library(tidyr)
# Boxplot using the original format
boxplot(chocolate$DC, chocolate$DC_MK, chocolate$MC,
names = c("Dark Chocolate", "Dark Chocolate with Milk", "Milk Chocolate"),
main = "Total Antioxidant Capacity by Chocolate Type",
xlab = "Chocolate Type", ylab = "Total Antioxidant Capacity",
col = c("lightblue", "lightgreen", "lightcoral"), border = "darkblue", notch = TRUE)
# Reshape the data into long format for easier plotting
library(tidyr)
# Boxplot using the original format
boxplot(chocolate$DC, chocolate$DC_MK, chocolate$MC,
names = c("Dark Chocolate", "Dark Chocolate with Milk", "Milk Chocolate"),
main = "Total Antioxidant Capacity by Chocolate Type",
xlab = "Chocolate Type", ylab = "Total Antioxidant Capacity",
col = c("lightblue", "lightgreen", "lightcoral"), border = "darkblue")
View(chocolates)
chocolate <- read.csv(file='chocolate_antioxidants.csv');
str(chocolate);
summary(chocolate);
# Reshape the data into long format for easier plotting
library(tidyr)
chocolate_long <- pivot_longer(chocolate, cols = c("DC", "DC_MK", "MC"),
names_to = "chocolate_type", values_to = "antioxidant_capacity")
# Boxplot
boxplot(antioxidant_capacity ~ chocolate_type, data = chocolate_long,
main = "Total Antioxidant Capacity by Chocolate Type",
xlab = "Chocolate Type", ylab = "Total Antioxidant Capacity",
col = c("lightblue", "lightgreen", "lightcoral"), border = "darkblue")
anova_result <- aov(antioxidant_capacity ~ chocolate_type, data = chocolate_long)
summary(anova_result)
tukey <- TukeyHSD(anova_result)
summary(tukey)
tukey <- TukeyHSD(anova_result)
summary(tukey)
tukey_result <- TukeyHSD(anova_result)
summary(tukey_result)
tukey <- TukeyHSD(anova_result)
summary(tukey)
tukey <- TukeyHSD(anova_result)
tukey$chocolate_type;
