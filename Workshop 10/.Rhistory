state_losses <- colony %>%
group_by(state) %>%
summarise(total_lost = sum(colony_lost)) %>%
arrange(desc(total_lost))
top_states <- state_losses %>% slice_head(n = 5)
bottom_states <- state_losses %>% slice_tail(n = 5)
top_bottom_states <- bind_rows(
top_states %>% mutate(group = "Highest Losses"),
bottom_states %>% mutate(group = "Lowest Losses")
)
ggplot(top_bottom_states, aes(x = reorder(state, -total_lost), y = total_lost, fill = group)) +
geom_col(show.legend = FALSE) +
facet_wrap(~ group, scales = "free") +
labs(title = "Colony Losses: Top 5 and Bottom 5 States", x = "State", y = "Total Colonies Lost") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
merged_data <- colony_sample %>%
inner_join(stressor_sample, by = c("year", "months", "state"))
ggplot(merged_data, aes(x = stressor, y = colony_lost_pct)) +
geom_boxplot(fill = "lightgreen") +
coord_flip() +
labs(title = "Colony Loss Percentage by Stressor", x = "Stressor", y = "Colony Loss Percentage")
correlation <- cor(merged_data$colony_lost, merged_data$stress_pct, use = "complete.obs")
print(paste("Correlation between colony loss and stress percentage:", round(correlation, 2)))
ggplot(merged_data, aes(x = stress_pct, y = colony_lost)) +
geom_point(alpha = 0.6, color = "purple") +
geom_smooth(method = "lm", color = "red") +
labs(title = "Relationship Between Colony Loss and Stress Percentage", x = "Stress Percentage", y = "Colonies Lost")
# Hypothesis Test: T-test between high and low stress percentages
high_stress <- merged_data %>% filter(stress_pct > median(stress_pct))
low_stress <- merged_data %>% filter(stress_pct <= median(stress_pct))
t_test_result <- t.test(high_stress$colony_lost_pct, low_stress$colony_lost_pct)
print(t_test_result)
# Regression Model: Colony loss prediction
model <- lm(colony_lost ~ stress_pct + year + factor(state), data = merged_data)
summary(model)
# Pairs plot for numeric relationships
ggpairs(merged_data, columns = c("colony_lost", "colony_added", "stress_pct"))
str(merged_data)
library(dplyr)
library(ggplot2)
# Summarize the data
merged_data %>%
group_by(stressor) %>%
summarise(
mean_loss = mean(colony_lost, na.rm = TRUE),
sd_loss = sd(colony_lost, na.rm = TRUE),
n = n()
)
# Visualize the distribution
ggplot(merged_data, aes(x = stressor, y = colony_lost)) +
geom_boxplot() +
labs(title = "Colony Loss by Stressor",
x = "Stressor",
y = "Colony Loss") +
theme_minimal()
library(rstatix)
merged_data %>%
group_by(stressor) %>%
shapiro_test(colony_lost)
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(GGally)
library(tidyr)
library(knitr)
# Load datasets
colony <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-01-11/colony.csv')
stressor <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-01-11/stressor.csv')
# Preprocessing
colony <- colony %>% filter(state != "United States")
stressor <- stressor %>% filter(state != "United States")
colony <- colony %>% mutate(across(where(is.numeric), ~ ifelse(is.na(.), median(., na.rm = TRUE), .)))
stressor <- stressor %>% mutate(across(where(is.numeric), ~ ifelse(is.na(.), median(., na.rm = TRUE), .)))
# Stratified sampling (10% of data from each state)
set.seed(123)
colony_sample <- colony %>% group_by(state) %>% sample_frac(0.1)
stressor_sample <- stressor %>% group_by(state) %>% sample_frac(0.1)
# Merge datasets
merged_data <- colony_sample %>% inner_join(stressor_sample, by = c("year", "months", "state"))
# Statistical Summary Table
stat_summary <- data.frame(
Variable = c("Colonies Lost", "Colony Loss Percentage", "Stress Percentage"),
Mean = c(mean(colony$colony_lost), mean(colony$colony_lost_pct), mean(stressor$stress_pct, na.rm = TRUE)),
Median = c(median(colony$colony_lost), median(colony$colony_lost_pct), median(stressor$stress_pct, na.rm = TRUE)),
Min = c(min(colony$colony_lost), min(colony$colony_lost_pct), min(stressor$stress_pct, na.rm = TRUE)),
Max = c(max(colony$colony_lost), max(colony$colony_lost_pct), max(stressor$stress_pct, na.rm = TRUE)),
StdDev = c(sd(colony$colony_lost), sd(colony$colony_lost_pct), sd(stressor$stress_pct, na.rm = TRUE))
)
# Print statistical summary as a table
kable(stat_summary, caption = "Table 1: Summary Statistics for Key Variables")
loss_trend <- colony_sample %>%
group_by(year) %>%
summarise(total_colony_lost = sum(colony_lost))
ggplot(loss_trend, aes(x = year, y = total_colony_lost)) +
geom_line(color = "blue", linewidth = 1) +
labs(
title = "Figure 1: Trend of Bee Colony Losses Over the Years",
x = "Year",
y = "Total Colonies Lost"
)
stressor_summary <- stressor_sample %>%
group_by(stressor) %>%
summarise(avg_stress_pct = mean(stress_pct, na.rm = TRUE)) %>%
arrange(desc(avg_stress_pct))
ggplot(stressor_summary, aes(x = reorder(stressor, -avg_stress_pct), y = avg_stress_pct)) +
geom_bar(stat = "identity", fill = "orange") +
coord_flip() +
labs(title = "Stressors Affecting Bee Colonies", x = "Stressors", y = "Average Stress Percentage")
state_losses <- colony %>%
group_by(state) %>%
summarise(total_lost = sum(colony_lost)) %>%
arrange(desc(total_lost))
top_states <- state_losses %>% slice_head(n = 5)
bottom_states <- state_losses %>% slice_tail(n = 5)
top_bottom_states <- bind_rows(
top_states %>% mutate(group = "Highest Losses"),
bottom_states %>% mutate(group = "Lowest Losses")
)
ggplot(top_bottom_states, aes(x = reorder(state, -total_lost), y = total_lost, fill = group)) +
geom_col(show.legend = FALSE) +
facet_wrap(~ group, scales = "free") +
labs(title = "Colony Losses: Top 5 and Bottom 5 States", x = "State", y = "Total Colonies Lost") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
merged_data <- colony_sample %>%
inner_join(stressor_sample, by = c("year", "months", "state"))
ggplot(merged_data, aes(x = stressor, y = colony_lost_pct)) +
geom_boxplot(fill = "lightgreen") +
coord_flip() +
labs(title = "Colony Loss Percentage by Stressor", x = "Stressor", y = "Colony Loss Percentage")
correlation <- cor(merged_data$colony_lost, merged_data$stress_pct, use = "complete.obs")
print(paste("Correlation between colony loss and stress percentage:", round(correlation, 2)))
ggplot(merged_data, aes(x = stress_pct, y = colony_lost)) +
geom_point(alpha = 0.6, color = "purple") +
geom_smooth(method = "lm", color = "red") +
labs(title = "Relationship Between Colony Loss and Stress Percentage", x = "Stress Percentage", y = "Colonies Lost")
# Hypothesis Test: T-test between high and low stress percentages
high_stress <- merged_data %>% filter(stress_pct > median(stress_pct))
low_stress <- merged_data %>% filter(stress_pct <= median(stress_pct))
t_test_result <- t.test(high_stress$colony_lost_pct, low_stress$colony_lost_pct)
print(t_test_result)
# Regression Model: Colony loss prediction
model <- lm(colony_lost ~ stress_pct + year + factor(state), data = merged_data)
summary(model)
# Pairs plot for numeric relationships
ggpairs(merged_data, columns = c("colony_lost", "colony_added", "stress_pct"))
# Hypothesis testing :
# Proportion test for number of colonies lost between high stress and low stress groups.
# Ho : No difference in number of colonies loss between high and low stress states.
# Ha : Significant difference in number of colonies loss between high and low stress states.
high_stress <- merged_data %>% filter(stress_pct > median(stress_pct))
low_stress <- merged_data %>% filter(stress_pct <= median(stress_pct))
# Define threshold for high colony loss
loss_threshold <- median(merged_data$colony_lost, na.rm = TRUE)
# Calculate counts of high-loss colonies in each group
high_stress_high_loss <- nrow(high_stress %>% filter(colony_lost > loss_threshold))
low_stress_high_loss <- nrow(low_stress %>% filter(colony_lost > loss_threshold))
# Total number of colonies in each group
high_stress_total <- nrow(high_stress)
low_stress_total <- nrow(low_stress)
# Perform two-proportion z-test
prop_test_results <- prop.test(
x = c(high_stress_high_loss, low_stress_high_loss),  # Counts of high-loss colonies
n = c(high_stress_total, low_stress_total),         # Total colonies in each group
alternative = "two.sided"                          # Test for any difference
)
# Print the test results
print(prop_test_results)
# Check normality for colony_loss within each state
by(merged_data$colony_loss, merged_data$state, shapiro.test)
# Check normality for colony_loss within each state
# Perform Shapiro-Wilk test for normality within each state
by(merged_data$colony_loss, merged_data$state, function(x) shapiro.test(x))
# Hypothesis Test 2 : Checking the realtionship between different stressors and colonies lost
# Assumptions
# Perform Shapiro-Wilk test for normality within each stress level
by(merged_data$colony_lost, merged_data$stressor, function(x) shapiro.test(x))
# Run Kruskal-Wallis Test to compare colony loss across different stressors
kruskal_result <- kruskal.test(colony_lost ~ stressor, data = merged_data)
# Display the result
print(kruskal_result)
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(GGally)
library(tidyr)
library(knitr)
# Load datasets
colony <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-01-11/colony.csv')
stressor <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-01-11/stressor.csv')
# Preprocessing
colony <- colony %>% filter(state != "United States")
stressor <- stressor %>% filter(state != "United States")
colony <- colony %>% mutate(across(where(is.numeric), ~ ifelse(is.na(.), median(., na.rm = TRUE), .)))
stressor <- stressor %>% mutate(across(where(is.numeric), ~ ifelse(is.na(.), median(., na.rm = TRUE), .)))
# Stratified sampling (10% of data from each state)
set.seed(123)
colony_sample <- colony %>% group_by(state) %>% sample_frac(0.1)
stressor_sample <- stressor %>% group_by(state) %>% sample_frac(0.1)
# Merge datasets
merged_data <- colony_sample %>% inner_join(stressor_sample, by = c("year", "months", "state"))
# Statistical Summary Table
stat_summary <- data.frame(
Variable = c("Colonies Lost", "Colony Loss Percentage", "Stress Percentage"),
Mean = c(mean(colony$colony_lost), mean(colony$colony_lost_pct), mean(stressor$stress_pct, na.rm = TRUE)),
Median = c(median(colony$colony_lost), median(colony$colony_lost_pct), median(stressor$stress_pct, na.rm = TRUE)),
Min = c(min(colony$colony_lost), min(colony$colony_lost_pct), min(stressor$stress_pct, na.rm = TRUE)),
Max = c(max(colony$colony_lost), max(colony$colony_lost_pct), max(stressor$stress_pct, na.rm = TRUE)),
StdDev = c(sd(colony$colony_lost), sd(colony$colony_lost_pct), sd(stressor$stress_pct, na.rm = TRUE))
)
# Print statistical summary as a table
kable(stat_summary, caption = "Table 1: Summary Statistics for Key Variables")
loss_trend <- colony_sample %>%
group_by(year) %>%
summarise(total_colony_lost = sum(colony_lost))
ggplot(loss_trend, aes(x = year, y = total_colony_lost)) +
geom_line(color = "blue", linewidth = 1) +
labs(
title = "Figure 1: Trend of Bee Colony Losses Over the Years",
x = "Year",
y = "Total Colonies Lost"
)
stressor_summary <- stressor_sample %>%
group_by(stressor) %>%
summarise(avg_stress_pct = mean(stress_pct, na.rm = TRUE)) %>%
arrange(desc(avg_stress_pct))
ggplot(stressor_summary, aes(x = reorder(stressor, -avg_stress_pct), y = avg_stress_pct)) +
geom_bar(stat = "identity", fill = "orange") +
coord_flip() +
labs(title = "Stressors Affecting Bee Colonies", x = "Stressors", y = "Average Stress Percentage")
state_losses <- colony %>%
group_by(state) %>%
summarise(total_lost = sum(colony_lost)) %>%
arrange(desc(total_lost))
top_states <- state_losses %>% slice_head(n = 5)
bottom_states <- state_losses %>% slice_tail(n = 5)
top_bottom_states <- bind_rows(
top_states %>% mutate(group = "Highest Losses"),
bottom_states %>% mutate(group = "Lowest Losses")
)
ggplot(top_bottom_states, aes(x = reorder(state, -total_lost), y = total_lost, fill = group)) +
geom_col(show.legend = FALSE) +
facet_wrap(~ group, scales = "free") +
labs(title = "Colony Losses: Top 5 and Bottom 5 States", x = "State", y = "Total Colonies Lost") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
merged_data <- colony_sample %>%
inner_join(stressor_sample, by = c("year", "months", "state"))
ggplot(merged_data, aes(x = stressor, y = colony_lost_pct)) +
geom_boxplot(fill = "lightgreen") +
coord_flip() +
labs(title = "Colony Loss Percentage by Stressor", x = "Stressor", y = "Colony Loss Percentage")
correlation <- cor(merged_data$colony_lost, merged_data$stress_pct, use = "complete.obs")
print(paste("Correlation between colony loss and stress percentage:", round(correlation, 2)))
ggplot(merged_data, aes(x = stress_pct, y = colony_lost)) +
geom_point(alpha = 0.6, color = "purple") +
geom_smooth(method = "lm", color = "red") +
labs(title = "Relationship Between Colony Loss and Stress Percentage", x = "Stress Percentage", y = "Colonies Lost")
# Hypothesis Test: T-test between high and low stress percentages
high_stress <- merged_data %>% filter(stress_pct > median(stress_pct))
low_stress <- merged_data %>% filter(stress_pct <= median(stress_pct))
t_test_result <- t.test(high_stress$colony_lost_pct, low_stress$colony_lost_pct)
print(t_test_result)
# Regression Model: Colony loss prediction
model <- lm(colony_lost ~ stress_pct + year + factor(state), data = merged_data)
summary(model)
# Pairs plot for numeric relationships
ggpairs(merged_data, columns = c("colony_lost", "colony_added", "stress_pct"))
# Hypothesis testing :
# Proportion test for number of colonies lost between high stress and low stress groups.
# Ho : No difference in number of colonies loss between high and low stress states.
# Ha : Significant difference in number of colonies loss between high and low stress states.
high_stress <- merged_data %>% filter(stress_pct > median(stress_pct))
low_stress <- merged_data %>% filter(stress_pct <= median(stress_pct))
# Define threshold for high colony loss
loss_threshold <- median(merged_data$colony_lost, na.rm = TRUE)
# Calculate counts of high-loss colonies in each group
high_stress_high_loss <- nrow(high_stress %>% filter(colony_lost > loss_threshold))
low_stress_high_loss <- nrow(low_stress %>% filter(colony_lost > loss_threshold))
# Total number of colonies in each group
high_stress_total <- nrow(high_stress)
low_stress_total <- nrow(low_stress)
# Perform two-proportion z-test
prop_test_results <- prop.test(
x = c(high_stress_high_loss, low_stress_high_loss),  # Counts of high-loss colonies
n = c(high_stress_total, low_stress_total),         # Total colonies in each group
alternative = "two.sided"                          # Test for any difference
)
# Print the test results
print(prop_test_results)
# Hypothesis Test 2 : Checking the realtionship between different stressors and colonies lost
# Assumptions
# Perform Shapiro-Wilk test for normality within each stress level
by(merged_data$colony_lost, merged_data$stressor, function(x) shapiro.test(x))
# Run Kruskal-Wallis Test to compare colony loss across different stressors
kruskal_result <- kruskal.test(colony_lost ~ stressor, data = merged_data)
# Display the result
print(kruskal_result)
View(kruskal_result)
setwd("~/Trent U/5240 Stats/Workshops/Workshop 09")
football <- read.csv(file = 'footballweights.csv');
football <- read.csv(file = 'footballweights.csv')
str(football)
football <- read.csv(file = 'footballweights.csv', header = TRUE)
str(football)
football <- read.csv(file = 'footballweights.csv')
str(football)
head(football,5)
str(football)
long_football
long_football <- pivot_longer(
football,
cols = everything(),
names_to = "team",
values_to = "weights"
)
library(tidyr)
football <- read.csv(file = 'footballweights.csv')
str(football)
library(tidyr)
long_football <- pivot_longer(
football,
cols = everything(),
names_to = "team",
values_to = "weights"
)
long_football
long_football
str(long_football)
str(long_football)
library(tidyr)
library(ggplot2)
football <- read.csv(file = 'footballweights.csv')
str(football)
long_football <- pivot_longer(
football,
cols = everything(),
names_to = "team",
values_to = "weights"
)
str(long_football)
# Create the boxplot
ggplot(long_df, aes(x = team, y = score)) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
labs(
title = "Team Scores Distribution",
x = "Team",
y = "Score"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create the boxplot
ggplot(long_football, aes(x = team, y = score)) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
labs(
title = "Team Scores Distribution",
x = "Team",
y = "Score"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create the boxplot
ggplot(long_football, aes(x = team, y = weights)) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
labs(
title = "Team Scores Distribution",
x = "Team",
y = "Score"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create the boxplot
ggplot(long_football, aes(x = team, y = weights)) +
geom_boxplot(fill = "lightblue", color = c("#780000","#c1121f","#fdf0d5","#003049","#669bbc")) +
labs(
title = "Team Scores Distribution",
x = "Team",
y = "Score"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create the boxplot
ggplot(long_football, aes(x = team, y = weights)) +
geom_boxplot(fill = "lightblue", col = c("#780000","#c1121f","#fdf0d5","#003049","#669bbc")) +
labs(
title = "Team Scores Distribution",
x = "Team",
y = "Score"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create the boxplot
ggplot(long_football, aes(x = team, y = weights)) +
geom_boxplot(fill = c("#780000","#c1121f","#fdf0d5","#003049","#669bbc"), col = c("#780000","#c1121f","#fdf0d5","#003049","#669bbc")) +
labs(
title = "Team Scores Distribution",
x = "Team",
y = "Score"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create the boxplot
ggplot(long_football, aes(x = team, y = weights)) +
geom_boxplot(fill = c("#780000","#c1121f","#fdf0d5","#003049","#669bbc"), col="black") +
labs(
title = "Team Scores Distribution",
x = "Team",
y = "Score"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create the boxplot
ggplot(long_football, aes(x = team, y = weights)) +
geom_boxplot(fill = c("#780000","#c1121f","#fdf0d5","#003049","#669bbc"), col="black") +
labs(
title = "Team Player's Weights Distribution",
x = "Team",
y = "Weight"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
anova_result <- aov(weights~team, data = long_football)
anova_result <- aov(weights~team, data = long_football)
summary(anova_result)
shapiro.test(residuals(anova_result))
anova_result <- aov(weights~team, data = long_football)
summary(anova_result)
TukeyHSD(anova_result)
ggplot(long_football, aes(x = team, y = weights)) +
geom_boxplot(fill = c("#780000","#c1121f","#fdf0d5","#003049","#669bbc"), col="black") +
labs(
title = "Team Player's Weights Distribution",
x = "Team",
y = "Weight"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(tidyr)
library(ggplot2)
football <- read.csv(file = 'footballweights.csv')
str(football)
long_football <- pivot_longer(
football,
cols = everything(),
names_to = "team",
values_to = "weights"
)
str(long_football)
ggplot(long_football, aes(x = team, y = weights)) +
geom_boxplot(fill = c("#780000","#c1121f","#fdf0d5","#003049","#669bbc"), col="black") +
labs(
title = "Team Player's Weights Distribution",
x = "Team",
y = "Weight"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
anova_result <- aov(weights~team, data = long_football)
summary(anova_result)
TukeyHSD(anova_result)
setwd("~/Trent U/5240 Stats/Workshops/Workshop 10")
awards <- read.csv(file='ws10-exercise-awards.csv')
head(awards,5)
str(awards)
summary(awards)
str(awards)
awards <- awards %>%
mutate(prog = factor(prog, levels = c(1,2,3),
labels = c("General","Academic","Vocational")))
awards <- awards %>%
mutate(prog = factor(prog, levels = c(1,2,3),
labels = c("General","Academic","Vocational")))
library(dplyr)
awards <- read.csv(file='ws10-exercise-awards.csv')
head(awards,5)
str(awards)
summary(awards)
awards <- awards %>%
mutate(prog = factor(prog, levels = c(1,2,3),
labels = c("General","Academic","Vocational")))
str(awards)
colSums(is.na(awards))
colSums(is.null(awards))
na
na
colSums(is.na(awards))
# Fit Poisson regression model
poisson_model <- glm(num_awards ~ prog + math,
family = poisson(link = "log"), data = awards)
# Summary of the model
summary(poisson_model)
poisson(link = "log",formula = num_awards ~ prog + math ,  data = awards)
colSums(is.na(awards))
poisson_dist <- glm(num_awards ~ prog + math,
family = poisson(link = "log"), data = awards)
summary(poisson_model)
plot(poisson_dist)
summary(poisson_dist)
poisson_dist <- glm(num_awards ~ prog + math,
family = poisson(link = "log"), data = awards)
summary(poisson_dist)
library(dplyr)
awards <- read.csv(file='ws10-exercise-awards.csv')
head(awards,5)
str(awards)
summary(awards)
awards <- awards %>%
mutate(prog = factor(prog, levels = c(1,2,3),
labels = c("General","Academic","Vocational")))
str(awards)
colSums(is.na(awards))
poisson_dist <- glm(num_awards ~ prog + math,
family = poisson(link = "log"), data = awards)
summary(poisson_dist)
